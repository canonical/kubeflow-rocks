# Copyright 2023 Canonical Ltd.
# See LICENSE file for licensing details.
[tox]
skipsdist = True
skip_missing_interpreters = True

[testenv]
setenv =
    PYTHONPATH={toxinidir}
    PYTHONBREAKPOINT=ipdb.set_trace
    CHARM_REPO=https://github.com/canonical/notebook-operators.git
    CHARM_BRANCH=main
    LOCAL_CHARM_DIR=charm_repo

[testenv:update-requirements]
allowlist_externals =
    bash
    find
    pip-compile
    xargs
commands = 
    ; uses 'bash -c' because piping didn't work in regular tox commands
    pip-compile requirements-integrity.in
    pip-compile requirements-integration.in
deps =
    pip-tools
description = Update requirements files by executing pip-compile on all requirements*.in files, including those in subdirs.

[testenv:integrity]
passenv = *
allowlist_externals =
    bash
    tox
    rockcraft
deps =
    -r requirements-integrity.txt
commands =
    # NOTE: .rock file should be built and available
    bash -c 'NAME=$(yq eval .name rockcraft.yaml) && \
             VERSION=$(yq eval .version rockcraft.yaml) && \
             ARCH=$(yq eval ".platforms | keys" rockcraft.yaml | awk -F " " '\''{ print $2 }'\'') && \
             ROCK="$\{NAME\}_$\{VERSION\}_$\{ARCH\}" && \
             sudo skopeo --insecure-policy copy oci-archive:$ROCK.rock docker-daemon:$ROCK:$VERSION && \
             docker save $ROCK > $ROCK.tar'
    # run rock tests
    pytest -v --tb native --show-capture=all --log-cli-level=INFO {posargs} {toxinidir}/tests

[testenv:integration]
passenv = *
allowlist_externals =
    bash
    git
    juju
    rm
    tox
    rockcraft
deps =
    -r requirements-integrity.txt
commands =
    # clone related charm
    rm -rf {env:LOCAL_CHARM_DIR}
    git clone --branch {env:CHARM_BRANCH} {env:CHARM_REPO} {env:LOCAL_CHARM_DIR}
    # upload rock to docker and microk8s cache, replace charm's container with local rock reference
    bash -c 'NAME=$(yq eval .name rockcraft.yaml) && \
             VERSION=$(yq eval .version rockcraft.yaml) && \
             ARCH=$(yq eval ".platforms | keys" rockcraft.yaml | awk -F " " '\''{ print $2 }'\'') && \
             ROCK="$\{NAME\}_$\{VERSION\}_$\{ARCH\}" && \
             sudo skopeo --insecure-policy copy oci-archive:$ROCK.rock docker-daemon:$ROCK:$VERSION && \
             docker save $ROCK > $ROCK.tar && \
             microk8s ctr image import $ROCK.tar && \
             microk8s ctr image list | grep notebook-controller && \
             yq e -i ".resources.oci-image.upstream-source=\"$ROCK:$VERSION\"" {env:LOCAL_CHARM_DIR}/charms/jupyter-controller/metadata.yaml'
    # run charm integration test with rock
    juju add-model kubeflow
    tox -c {env:LOCAL_CHARM_DIR} -e integration -- --model kubeflow

[testenv:rock-integration]
passenv = *
allowlist_externals =
    rockcraft
    tox
commands =
    # build and pack rock
    rockcraft clean
    rockcraft pack
    # use integration environment in this tox.ini
    tox -e integration

