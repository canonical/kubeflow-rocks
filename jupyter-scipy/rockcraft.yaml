name: jupyter-scipy
summary: An image for using Jupyter SciPy
description: |
  This image is used as part of the Charmed Kubeflow product. It is deployed
  in a user namespace, and enables users to perform CPU-accelerated tasks
  using SciPy from within a Jupyter Notebook.

  Both SciPy and Jupyter are installed in Conda environment, which is
  automatically activated.
version: v1.7.0_20.04_1 # version format: <KF-upstream-version>_<base-version>_<Charmed-KF-version>
license: Apache-2.0
base: ubuntu:20.04
run-user: _daemon_
services:
  jupyter:
    override: replace
    summary: "jupyter-scipy service"
    startup: enabled
    environment:
      NB_USER: jovyan
      NB_UID: 1001
      NB_PREFIX: /
      HOME: /home/jovyan
      SHELL: /bin/bash
      LANG: en_US.UTF-8
      LANGUAGE: en_US.UTF-8
      LC_ALL: en_US.UTF-8
      PATH: /opt/conda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      PYTHONPATH: /opt/conda/lib/python3.8/site-packages/
    command: ./jupyter lab --notebook-dir="/home/jovyan" --ip=0.0.0.0 --no-browser --port=8888 --ServerApp.token="" --ServerApp.password="" --ServerApp.allow_origin="*" --ServerApp.base_url="/" --ServerApp.authenticate_prometheus=False
    working-dir: /opt/conda/bin/
platforms:
  amd64:

parts:
  security-team-requirement:
    plugin: nil
    override-build: |
      mkdir -p ${CRAFT_PART_INSTALL}/usr/share/rocks
      (echo "# os-release" && cat /etc/os-release && echo "# dpkg-query" && \
      dpkg-query -f '${db:Status-Abbrev},${binary:Package},${Version},${source:Package},${Source:Version}\n' -W) \
      > ${CRAFT_PART_INSTALL}/usr/share/rocks/dpkg.query

  overlay-pkgs:
    plugin: nil
    # These were taken from the upstream base image. They *may not* all be required.
    overlay-packages:
      - apt-transport-https
      - bash
      - bzip2
      - ca-certificates
      - curl
      - git
      - gnupg
      - gnupg2
      - locales
      - lsb-release
      - nano
      - software-properties-common
      - tzdata
      - unzip
      - vim
      - wget
      - zip

  kubectl:
    plugin: nil
    stage-snaps:
      - kubectl/1.24/stable
    organize:
      kubectl: bin/kubectl
    stage:
      - bin/kubectl

  nodejs:
    plugin: nil
    stage-packages: [nodejs]

  generate-locale:
    plugin: nil
    build-packages:
      - locales
    override-build: |
      echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
      locale-gen
      mkdir -p $CRAFT_PART_INSTALL/usr/lib/locale $CRAFT_PART_INSTALL/usr/share/i18n/locales
      cp /usr/lib/locale/locale-archive $CRAFT_PART_INSTALL/usr/lib/locale/locale-archive
      cp -r /usr/share/i18n/locales $CRAFT_PART_INSTALL/usr/share/i18n/locales

  conda-jupyter:
    plugin: nil
    source: https://github.com/kubeflow/kubeflow
    source-type: git
    source-tag: v1.7-branch # upstream branch
    build-packages:
      - lsb-release
      - wget
    build-environment:
      - MINIFORGE_ARCH: "x86_64"
      - MINIFORGE_VERSION: "4.10.1-4"
      - PIP_VERSION: "21.1.2"
      - PYTHON_VERSION: "3.8.10"
      - HOME: "/home/jovyan"
      - CONDA_DIR: "/opt/conda"
      - CONDA_BIN: "/opt/conda/bin"
    stage-packages:
      - python3.8-distutils
    override-build: |
      set -xe
      mkdir -p "${CONDA_DIR}" "${HOME}"

      # Download the miniforge installer
      wget -qO miniforge.sh \
        "https://github.com/conda-forge/miniforge/releases/download/${MINIFORGE_VERSION}/Miniforge3-${MINIFORGE_VERSION}-Linux-${MINIFORGE_ARCH}.sh"

      # Download the miniforge install shasums
      wget -qO miniforge.sh.sha256 \
        "https://github.com/conda-forge/miniforge/releases/download/${MINIFORGE_VERSION}/Miniforge3-${MINIFORGE_VERSION}-Linux-${MINIFORGE_ARCH}.sh.sha256"

      # Verify that the downloaded installer is correct
      echo "$(cat miniforge.sh.sha256 | awk '{ print $1; }') miniforge.sh" | sha256sum --check

      # Run the miniforge installer
      /bin/sh miniforge.sh -b -f -p "${CONDA_DIR}"

      # Configure conda
      "${CONDA_BIN}/conda" config --system --set auto_update_conda false
      "${CONDA_BIN}/conda" config --system --set show_channel_urls true

      echo "conda ${MINIFORGE_VERSION:0:-2}" >> "${CONDA_DIR}/conda-meta/pinned"
      echo "python ${PYTHON_VERSION}" >> "${CONDA_DIR}/conda-meta/pinned"

      # Install the correct versions of python, conda, pip
      "${CONDA_BIN}/conda" install -y -q \
                          python="${PYTHON_VERSION}" \
                          conda="${MINIFORGE_VERSION:0:-2}" \
                          pip="${PIP_VERSION}"

      # Clean up
      "${CONDA_BIN}/conda" update -y -q --all
      "${CONDA_BIN}/conda" clean -a -f -y

      # Install the jupyter python requirements
      cp ${CRAFT_PART_SRC}/components/example-notebook-servers/jupyter/requirements.txt jupyter-requirements.txt
      "${CONDA_BIN}/pip" install --no-cache-dir -r jupyter-requirements.txt
      
      # Install the scipy requirements
      cp ${CRAFT_PART_SRC}/components/example-notebook-servers/jupyter-scipy/requirements.txt scipy-requirements.txt
      "${CONDA_BIN}/pip" install --no-cache-dir -r scipy-requirements.txt

      # Generate a jupyter lab config
      "${CONDA_BIN}/jupyter" lab --generate-config

      # Create some directories for staging files
      mkdir -p "${CRAFT_PART_INSTALL}/opt" "${CRAFT_PART_INSTALL}/etc" "${CRAFT_PART_INSTALL}/home"

      # Write some config files for activating conda in user sessions
      echo ". /opt/conda/etc/profile.d/conda.sh" >> "${HOME}/.bashrc"
      echo ". /opt/conda/etc/profile.d/conda.sh" >> "${CRAFT_PART_INSTALL}/etc/profile"
      echo "conda activate base" >> "${HOME}/.bashrc"
      echo "conda activate base" >> "${CRAFT_PART_INSTALL}/etc/profile"

      # Do some cleanup
      rm -rf "${HOME}/.wget-hsts" "${HOME}/.cache"

      # Stage the conda directories
      cp -r "${CONDA_DIR}" "${CRAFT_PART_INSTALL}/opt/conda"
      cp -r "${HOME}" "${CRAFT_PART_INSTALL}/${HOME}"

  # not-root user for this ROCK should be 'jovyan'
  non-root-user:
    plugin: nil
    after: [conda-jupyter]
    overlay-script: |
      # Create a user in the $CRAFT_OVERLAY chroot
      useradd -R $CRAFT_OVERLAY -M -s /bin/bash -N -u 1001 jovyan
    override-prime: |
      craftctl default
      chown -R 584792:users home/jovyan
      chown -R 584792:users bin
      chown -R 584792:users opt/conda
