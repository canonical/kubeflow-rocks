# Based on:
# https://github.com/kubeflow/kubeflow/blob/v1.10.0-rc.0/components/example-notebook-servers/base/Dockerfile
# https://github.com/kubeflow/kubeflow/blob/v1.10.0-rc.0/components/example-notebook-servers/jupyter/Dockerfile
# https://github.com/kubeflow/kubeflow/blob/v1.10.0-rc.0/components/example-notebook-servers/jupyter-scipy/Dockerfile
name: jupyter-scipy
summary: An image for using Jupyter SciPy
description: |
  This image is used as part of the Charmed Kubeflow product. It is deployed
  in a user namespace, and enables users to perform CPU-accelerated tasks
  using SciPy from within a Jupyter Notebook.

  Both SciPy and Jupyter are installed in Conda environment, which is
  automatically activated.
version: 1.10.0-rc.0
license: Apache-2.0
base: ubuntu@22.04
run-user: _daemon_
services:
  jupyter:
    override: replace
    summary: "jupyter-scipy service"
    startup: enabled
    environment:
      # To check the values run upstream docker image and run ps aux -ww to get the process id
      # Environment variables for the process can be checked with cat /proc/<id>/environ | tr '\0' '\n'
      JUPYTER_RUNTIME_DIR: /tmp/jupyter_runtime
      NB_USER: jovyan
      NB_UID: 1000
      NB_GID: 0
      USERS_GID: 100
      HOME: "/home/jovyan"
      # The following environment variables need to be specified in the Pod's environment, and not hardcoded.
      #NB_PREFIX: ""
      HOME_TMP: /tmp_home/jovyan
      SHELL: /bin/bash
      LANG: en_US.UTF-8
      LANGUAGE: en_US.UTF-8
      LC_ALL: en_US.UTF-8
      PATH: /opt/conda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      PYTHONPATH: /opt/conda/lib/python3.11/site-packages/
    # Command source https://github.com/kubeflow/kubeflow/blob/v1.10.0-rc.0/components/example-notebook-servers/jupyter/s6/services.d/jupyterlab/run
    command: bash -c '/opt/conda/bin/jupyter lab --notebook-dir=${HOME} --ip=0.0.0.0 --no-browser --allow-root --port=8888 --ServerApp.token="" --ServerApp.password="" --ServerApp.allow_origin="*" --ServerApp.allow_remote_access=True --ServerApp.base_url=${NB_PREFIX} --ServerApp.authenticate_prometheus=False'
    working-dir: /home/jovyan/
platforms:
  amd64:

parts:
  security-team-requirement:
    plugin: nil
    override-build: |
      mkdir -p ${CRAFT_PART_INSTALL}/usr/share/rocks
      (echo "# os-release" && cat /etc/os-release && echo "# dpkg-query" && \
      dpkg-query -f '${db:Status-Abbrev},${binary:Package},${Version},${source:Package},${Source:Version}\n' -W) \
      > ${CRAFT_PART_INSTALL}/usr/share/rocks/dpkg.query

  overlay-pkgs:
    plugin: nil
    # These were taken from the upstream base image. They *may not* all be required.
    overlay-packages:
      - apt-transport-https
      - bash
      - bzip2
      - ca-certificates
      - curl
      - git
      - gnupg
      - gnupg2
      - locales
      - lsb-release
      - nano
      - software-properties-common
      - tzdata
      - unzip
      - vim
      - wget
      - xz-utils
      - zip
      # jupyter scipy packages
      - cm-super
      - dvipng
      - ffmpeg

  kubectl:
    plugin: nil
    stage-snaps:
      - kubectl/1.29/stable
    organize:
      kubectl: bin/kubectl
    stage:
      - bin/kubectl

  nodejs:
    plugin: nil
    build-environment:
      - NODE_MAJOR_VERSION: 20
    override-build: |
      # Add Node.js repository and install
      export DEBIAN_FRONTEND=noninteractive
      curl -sL "https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key" | apt-key add -
      echo "deb https://deb.nodesource.com/node_${NODE_MAJOR_VERSION}.x nodistro main" > /etc/apt/sources.list.d/nodesource.list
      apt-get -yq update
      apt-get -yq install --no-install-recommends nodejs
      apt-get clean
      rm -rf /var/lib/apt/lists/*

      # Create necessary directories in ${CRAFT_PART_INSTALL}
      mkdir -p ${CRAFT_PART_INSTALL}/usr/bin

      # Stage Node.js installation by copying the appropriate files
      cp -r /usr/bin/node ${CRAFT_PART_INSTALL}/usr/bin/

  generate-locale:
    plugin: nil
    build-packages:
      - locales
    override-build: |
      echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
      locale-gen
      mkdir -p $CRAFT_PART_INSTALL/usr/lib/locale $CRAFT_PART_INSTALL/usr/share/i18n/locales
      cp /usr/lib/locale/locale-archive $CRAFT_PART_INSTALL/usr/lib/locale/locale-archive
      cp -r /usr/share/i18n/locales $CRAFT_PART_INSTALL/usr/share/i18n/locales

  conda-jupyter:
    plugin: nil
    source: https://github.com/kubeflow/kubeflow
    source-type: git
    source-tag: v1.10.0-rc.0
    build-packages:
      - lsb-release
      - wget
    build-environment:
      - JUPYTERLAB_VERSION: "4.2.5"
      - JUPYTER_VERSION: "7.2.2"
      - MINIFORGE_ARCH: "x86_64"
      - MINIFORGE_VERSION: "24.7.1-2"
      - PIP_VERSION: "24.2"
      - PYTHON_VERSION: "3.11.10"
      - HOME: "/home/jovyan"
      - HOME_TMP: /tmp_home/jovyan
      - NB_USER: jovyan
      - NB_GID: 0
      - CONDA_DIR: "/opt/conda"
      - CONDA_BIN: "/opt/conda/bin"
      - MAMBA_ROOT_PREFIX: "/opt/conda"
      - MLFLOW_VERSION: "2.15.1"  # Latest mlflow version we support https://github.com/canonical/mlflow-operator/blob/main/metadata.yaml#L18
    stage-packages:
      - python3.11-distutils
    override-build: |
      set -xe
      mkdir -p "${CONDA_DIR}" "${HOME}"

      # Download the miniforge installer
      wget -qO miniforge.sh \
        "https://github.com/conda-forge/miniforge/releases/download/${MINIFORGE_VERSION}/Miniforge3-${MINIFORGE_VERSION}-Linux-${MINIFORGE_ARCH}.sh"

      # Download the miniforge install shasums
      wget -qO miniforge.sh.sha256 \
        "https://github.com/conda-forge/miniforge/releases/download/${MINIFORGE_VERSION}/Miniforge3-${MINIFORGE_VERSION}-Linux-${MINIFORGE_ARCH}.sh.sha256"

      # Verify that the downloaded installer is correct
      echo "$(cat miniforge.sh.sha256 | awk '{ print $1; }') miniforge.sh" | sha256sum --check

      # Run the miniforge installer
      /bin/sh miniforge.sh -b -f -p "${CONDA_DIR}"

      # Configure conda
      "${CONDA_BIN}/conda" config --system --set auto_update_conda false
      "${CONDA_BIN}/conda" config --system --set show_channel_urls true

      # Install the correct versions of python, conda, pip
      "${CONDA_BIN}/conda" install -y -q \
                          python="${PYTHON_VERSION}" \
                          conda="${MINIFORGE_VERSION:0:-2}" \
                          pip="${PIP_VERSION}"

      # Clean up
      "${CONDA_BIN}/conda" update -y -q --all
      "${CONDA_BIN}/conda" clean -a -f -y
      
      # Install the jupyter python requirements
      echo "jupyterlab ==${JUPYTERLAB_VERSION}" >> ${CONDA_DIR}/conda-meta/pinned
      echo "notebook ==${JUPYTER_VERSION}" >> ${CONDA_DIR}/conda-meta/pinned
      "${CONDA_BIN}/conda" install -y -q \
        jupyterlab==${JUPYTERLAB_VERSION} \
        notebook==${JUPYTER_VERSION}
      "${CONDA_BIN}/conda" clean -a -f -y
      
      cp ${CRAFT_PART_SRC}/components/example-notebook-servers/jupyter/requirements.txt /tmp/requirements.txt
      "${CONDA_BIN}/pip" install --no-cache-dir -r /tmp/requirements.txt
      rm -f /tmp/requirements.txt

      # configure - jupyter
      "${CONDA_BIN}/jupyter" labextension disable --level=system "@jupyterlab/apputils-extension:announcements" 
      "${CONDA_BIN}/jupyter" labextension lock --level=system "@jupyterlab/apputils-extension"
      
      # Install the jupyter-scipy requirements
      "${CONDA_BIN}/mamba" install -y -q \
        altair \
        beautifulsoup4==4.12.3 \
        bokeh==3.3.4 \
        bottleneck \
        brotli \
        cloudpickle \
        dask==2024.5.1 \
        dill \
        h5py \
        ipympl \
        matplotlib==3.8.4 \
        numba \
        numexpr \
        openblas==0.3.25 \
        openpyxl \
        pandas==2.1.4 \
        patsy \
        protobuf \
        pytables==3.9.2 \
        scikit-image==0.22.0 \
        scikit-learn==1.3.2 \
        scipy==1.11.3 \
        seaborn==0.13.2 \
        sqlalchemy==2.0.30 \
        statsmodels \
        sympy \
        vincent \
        xlrd \

      "${CONDA_BIN}/mamba" clean -a -f -y
      
      cp $CRAFT_PART_SRC/components/example-notebook-servers/jupyter-scipy/requirements.txt /tmp/requirements.txt
      "${CONDA_BIN}/pip" install --no-cache-dir -r /tmp/requirements.txt
      rm -f /tmp/requirements.txt

      # Install mlflow so we can use this with mlflow https://github.com/canonical/data-science-stack/issues/47#issuecomment-2004136344
      "${CONDA_BIN}/pip" install --quiet --no-cache-dir \
        mlflow==${MLFLOW_VERSION}
      
      # Fixes the problem with pipy extension not loading in the jupyter
      "${CONDA_BIN}/pip" install httpx==0.23.0

      # Create some directories for staging files
      # mkdir -p "${CRAFT_PART_INSTALL}/opt" "${CRAFT_PART_INSTALL}/etc" "${CRAFT_PART_INSTALL}/home"
      mkdir -p "${CRAFT_PART_INSTALL}/${CONDA_DIR}" \
      "${CRAFT_PART_INSTALL}/etc" \
      "${CRAFT_PART_INSTALL}/${HOME}" \
      "${CRAFT_PART_INSTALL}/${HOME_TMP}" \

      # Write some config files for activating conda in user sessions
      chmod 2775 ${CRAFT_PART_INSTALL}/${CONDA_DIR}
      echo ". /opt/conda/etc/profile.d/conda.sh" >> "${HOME}/.bashrc"
      echo ". /opt/conda/etc/profile.d/conda.sh" >> "${CRAFT_PART_INSTALL}/etc/profile"
      echo "conda activate base" >> "${HOME}/.bashrc"
      echo "conda activate base" >> "${CRAFT_PART_INSTALL}/etc/profile"

      # Do some cleanup
      rm -rf "${HOME}/.wget-hsts" "${HOME}/.cache"

      # Stage the conda directories
      cp -r "${CONDA_DIR}" "${CRAFT_PART_INSTALL}/opt"
      cp -r "${HOME}" "${CRAFT_PART_INSTALL}/home"

  # not-root user for this rock should be 'jovyan'
  non-root-user:
    plugin: nil
    after: [conda-jupyter]
    build-environment:
    - HOME: /home/jovyan
    - NB_UID: 1000
    - NB_USER: jovyan
    - NB_GID: 0
    - USERS_GID: 100
    overlay-script: |
      # Create a user in the $CRAFT_OVERLAY chroot
      useradd -R ${CRAFT_OVERLAY} \
      --shell /bin/bash \
      --home ${HOME} \
      --uid ${NB_UID} \
      --gid ${NB_GID} \
      --groups ${USERS_GID} \
      ${NB_USER}
    override-prime: |
      craftctl default
      chmod 2775 ${CRAFT_PRIME}/home/${NB_USER}
      chmod 2775 ${CRAFT_PRIME}/tmp_home/${NB_USER}
      chown -R 584792:${NB_GID} ${CRAFT_PRIME}/home/${NB_USER}
      chown -R 584792:${NB_GID} ${CRAFT_PRIME}/bin
      chown -R 584792:${NB_GID} ${CRAFT_PRIME}/opt/conda
      mkdir -pv ${CRAFT_PRIME}/usr/local/etc/jupyter
      chown -R ${NB_UID}:${NB_GID} ${CRAFT_PRIME}/usr/local/etc/jupyter
