# Based on the following Dockerfiles:
# https://github.com/kubeflow/kubeflow/blob/v1.10.0/components/example-notebook-servers/base/Dockerfile
# https://github.com/kubeflow/kubeflow/blob/v1.10.0/components/example-notebook-servers/codeserver/Dockerfile
# https://github.com/kubeflow/kubeflow/blob/v1.10.0/components/example-notebook-servers/codeserver-python/Dockerfile
name: codeserver-python
summary: An image for using Codeserver & Jupyter on CPUs
description: |
  This image is used as part of the Charmed Kubeflow product. It is deployed
  in a user namespace, and enables users to perform CPU-accelerated tasks
  using PyTorch from within a Jupyter Notebook.

  Both PyTorch and Jupyter are installed in a Conda environment, which is
  automatically activated.
version: "1.10.0"
license: Apache-2.0
base: ubuntu@22.04
run-user: _daemon_

services:
  codeserver-jupyter:
    override: replace
    summary: "codeserver-jupyter service"
    startup: enabled
    command: bash -c 'cp -n -r -T ${HOME_TMP} ${HOME} && /usr/bin/code-server --bind-addr 0.0.0.0:8888 --disable-telemetry --disable-update-check --disable-workspace-trust --disable-getting-started-override --auth none --trusted-origins "*" ${HOME}'
    working-dir: /home/jovyan/
    environment:
       USERS_GID: "100"
       HOME: "/home/jovyan"
       HOME_TMP: "/tmp_home/jovyan"
       SHELL: "/bin/bash"
       LANG: "en_US.UTF-8"
       LANGUAGE: "en_US.UTF-8"
       LC_ALL: "en_US.UTF-8"	
       PATH: "/opt/conda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
       PYTHONPATH: "/opt/conda/lib/python3.11/site-packages/"
       XDG_RUNTIME_DIR: "/tmp/runtime-jovyan"
platforms:
  amd64:

parts:
  security-team-requirement:
    plugin: nil
    override-build: |
      mkdir -p ${CRAFT_PART_INSTALL}/usr/share/rocks
      (echo "# os-release" && cat /etc/os-release && echo "# dpkg-query" && \
      dpkg-query -f '${db:Status-Abbrev},${binary:Package},${Version},${source:Package},${Source:Version}\n' -W) \
      > ${CRAFT_PART_INSTALL}/usr/share/rocks/dpkg.query

  overlay-pkgs:
    plugin: nil
    overlay-packages:
      - apt-transport-https
      - bash
      - bzip2
      - ca-certificates
      - curl
      - git
      - gnupg
      - gnupg2
      - locales
      - libxml2
      - lsb-release
      - nano
      - software-properties-common
      - tzdata
      - unzip
      - vim
      - wget
      - xz-utils
      - zip

  kubectl:
    plugin: nil
    stage-snaps:
      - kubectl/1.31/stable
    organize:
      kubectl: bin/kubectl
    stage:
      - bin/kubectl

  nodejs:
    plugin: nil
    stage-packages: [nodejs]

  generate-locale:
    plugin: nil
    build-packages:
      - locales
    override-build: |
      echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
      locale-gen
      mkdir -p $CRAFT_PART_INSTALL/usr/lib/locale $CRAFT_PART_INSTALL/usr/share/i18n/locales
      cp /usr/lib/locale/locale-archive $CRAFT_PART_INSTALL/usr/lib/locale/locale-archive
      cp -r /usr/share/i18n/locales $CRAFT_PART_INSTALL/usr/share/i18n/locales

  conda-codeserver:
    plugin: nil
    source: https://github.com/kubeflow/kubeflow
    source-type: git
    source-tag: v1.10.0
    build-packages:
      - lsb-release
      - wget
    build-environment:
      - HOME: "/home/jovyan"
      - HOME_TMP: "/tmp_home/jovyan"
      - NB_USER: "jovyan"
      - NB_GID: "0"
      - CONDA_DIR: "/opt/conda"
      - CONDA_BIN: "/opt/conda/bin"      
      - CODESERVER_VERSION: "4.96.4"
      - CODESERVER_PYTHON_VERSION: "2025.0.0"
      - CODESERVER_JUPYTER_VERSION: "2024.11.0"
      - CODESERVER_BIN: "/usr/bin/code-server"
      - IPYKERNEL_VERSION: "6.29.5"
      - MINIFORGE_ARCH: "x86_64"      
      - MINIFORGE_VERSION: "24.11.3-0"
      - PIP_VERSION: "24.3.1"
      - PYTHON_VERSION: "3.11.11"
      - PATH: "${CONDA_DIR}/bin:${PATH}"
      - XDG_RUNTIME_DIR: "/tmp/runtime-${NB_USER}"
    stage-packages:
      - python3-distutils
    override-build: |
      mkdir -p "$CONDA_DIR" "$HOME"
      
      # install - code-server
      curl -fL https://github.com/coder/code-server/releases/download/v${CODESERVER_VERSION}/code-server-${CODESERVER_VERSION}-linux-amd64.tar.gz | tar -C /lib -xz
      mv /lib/code-server-${CODESERVER_VERSION}-linux-amd64 /lib/code-server-${CODESERVER_VERSION}
      ln -s /lib/code-server-${CODESERVER_VERSION}/bin/code-server /bin/code-server

      # Download the miniforge installer
      wget -qO miniforge.sh \
        "https://github.com/conda-forge/miniforge/releases/download/${MINIFORGE_VERSION}/Miniforge3-${MINIFORGE_VERSION}-Linux-${MINIFORGE_ARCH}.sh"

      # Download the miniforge install shasums
      wget -qO miniforge.sh.sha256 \
        "https://github.com/conda-forge/miniforge/releases/download/${MINIFORGE_VERSION}/Miniforge3-${MINIFORGE_VERSION}-Linux-${MINIFORGE_ARCH}.sh.sha256"

      # Verify that the downloaded installer is correct
      echo "$(cat miniforge.sh.sha256 | awk '{ print $1; }') miniforge.sh" | sha256sum --check

      # Run the miniforge installer
      /bin/sh miniforge.sh -b -f -p "${CONDA_DIR}"

      # Configure conda
      "${CONDA_BIN}/conda" config --system --set auto_update_conda false
      "${CONDA_BIN}/conda" config --system --set show_channel_urls true

      echo "conda ${MINIFORGE_VERSION:0:-2}" >> "${CONDA_DIR}/conda-meta/pinned"
      echo "python==${PYTHON_VERSION}" >> "${CONDA_DIR}/conda-meta/pinned"

      # Install the correct versions of python, conda, pip
      "${CONDA_BIN}/conda" install -y -q \
                          python="${PYTHON_VERSION}" \
                          conda="${MINIFORGE_VERSION:0:-2}" \
                          pip="${PIP_VERSION}"

      # Clean up
      "${CONDA_BIN}/conda" update -y -q --all
      "${CONDA_BIN}/conda" clean -a -f -y

      # install - ipykernel
      # NOTE: we need this for jupyter codeserver extension to work
      echo "ipykernel==${IPYKERNEL_VERSION}" >> ${CONDA_DIR}/conda-meta/pinned
      "${CONDA_BIN}/conda" install -y -q ipykernel==${IPYKERNEL_VERSION}

      # Clean up
      "${CONDA_BIN}/conda" clean -a -f -y

      # install - requirements.txt
      cp ${CRAFT_PART_SRC}/components/example-notebook-servers/codeserver-python/requirements.txt /tmp/requirements.txt
      "${CONDA_BIN}/pip" install --no-cache-dir -r /tmp/requirements.txt
      rm -f /tmp/requirements.txt


      # install - codeserver extensions
      code-server --install-extension "ms-python.python@${CODESERVER_PYTHON_VERSION}" --force 
      code-server --install-extension "ms-toolsai.jupyter@${CODESERVER_JUPYTER_VERSION}" --force 
      code-server --list-extensions --show-versions


      # Create some directories for staging files
      mkdir -p "${CRAFT_PART_INSTALL}/${CONDA_DIR}" \
      "${CRAFT_PART_INSTALL}/etc" \
      "${CRAFT_PART_INSTALL}/${HOME}" \
      "${CRAFT_PART_INSTALL}/${HOME_TMP}" \
      "${CRAFT_PART_INSTALL}/lib" \
      "${CRAFT_PART_INSTALL}/usr/bin" \
      "${CRAFT_PART_INSTALL}/${XDG_RUNTIME_DIR}"

      # Write some config files for activating conda in user sessions
      chmod 2775 ${CRAFT_PART_INSTALL}/${CONDA_DIR}
      echo ". /opt/conda/etc/profile.d/conda.sh" >> "${HOME}/.bashrc"
      echo ". /opt/conda/etc/profile.d/conda.sh" >> "${CRAFT_PART_INSTALL}/etc/profile"
      echo "conda activate base" >> "${HOME}/.bashrc"
      echo "conda activate base" >> "${CRAFT_PART_INSTALL}/etc/profile"

      # Do some cleanup
      rm -rf "${HOME}/.wget-hsts" "${HOME}/.cache"

      cp -r ${CRAFT_PART_SRC}/components/example-notebook-servers/codeserver-python/home ${CRAFT_PART_INSTALL}

      # Stage directories
      cp -r /lib/code-server-${CODESERVER_VERSION} ${CRAFT_PART_INSTALL}/lib/code-server
      ln -sf /lib/code-server/bin/code-server ${CRAFT_PART_INSTALL}/usr/bin/code-server
      cp -r "${CONDA_DIR}" "${CRAFT_PART_INSTALL}/opt"      
      cp -r "${HOME}" "${CRAFT_PART_INSTALL}/home"
      cp -r "${HOME}" "${CRAFT_PART_INSTALL}/tmp_home"
      
  # not-root user for this rock should be 'jovyan'
  non-root-user:
    plugin: nil
    after: [conda-codeserver]
    build-environment:
    - HOME: /home/jovyan
    - NB_UID: 1000
    - NB_USER: jovyan
    - NB_GID: 0
    - USERS_GID: 100
    - XDG_RUNTIME_DIR: /tmp/runtime-${NB_USER}
    overlay-script: |
      # Create a user in the $CRAFT_OVERLAY chroot
      useradd -R ${CRAFT_OVERLAY} \
      --shell /bin/bash \
      --home ${HOME} \
      --uid ${NB_UID} \
      --gid ${NB_GID} \
      --groups ${USERS_GID} \
      ${NB_USER}
    override-prime: |
      craftctl default
      chmod 2775 ${CRAFT_PRIME}/home/${NB_USER}
      chmod 2775 ${CRAFT_PRIME}/tmp_home/${NB_USER}
      chown -R 584792:${NB_GID} ${CRAFT_PRIME}/home/${NB_USER}
      chown -R 584792:${NB_GID} ${CRAFT_PRIME}/bin
      chown -R 584792:${NB_GID} ${CRAFT_PRIME}/opt/conda
      mkdir -pv ${CRAFT_PRIME}/usr/local/etc/jupyter
      mkdir -pv ${CRAFT_PRIME}/usr/local/bin
      chown -R ${NB_UID}:${NB_GID} ${CRAFT_PRIME}/usr/local/etc/jupyter
      chown -R 584792:${NB_GID} ${CRAFT_PRIME}/usr/local/bin
      
      chmod 700 ${CRAFT_PRIME}/${XDG_RUNTIME_DIR}