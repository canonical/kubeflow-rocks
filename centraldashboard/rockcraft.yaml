# Dockerfile https://github.com/kubeflow/kubeflow/blob/v1.8-branch/components/centraldashboard/Dockerfile
name: kubeflow-central-dashboard
summary: Kubeflow Landing Page
description: |
  This component serves as the landing page and central dashboard for Kubeflow deployments.
  It provides a jump-off point to all other facets of the platform.
version: "1.8"
license: Apache-2.0
base: ubuntu@22.04
platforms:
  amd64:
run-user: _daemon_

services:
  serve:
    override: replace
    summary: "Kubeflow central dashboard service"
    command: "/usr/bin/npm start --prefix /app"
    startup: enabled
    environment:
      NODE_ENV: production

parts:
  security-team-requirement:
    plugin: nil
    override-build: |
      mkdir -p ${CRAFT_PART_INSTALL}/usr/share/rocks
      (echo "# os-release" && cat /etc/os-release && echo "# dpkg-query" && dpkg-query -f '${db:Status-Abbrev},${binary:Package},${Version},${source:Package},${Source:Version}\n' -W) > ${CRAFT_PART_INSTALL}/usr/share/rocks/dpkg.query

  builder:
    plugin: dump
    source: https://github.com/kubeflow/kubeflow
    source-subdir: components/centraldashboard
    source-type: git
    source-tag: v1.8-branch # upstream branch
    build-snaps:
      - node/14/stable
    build-packages:
      - bash
      - chromium-browser
      - libnss3
      - libfreetype-dev
      - libharfbuzz-dev
      - fonts-freefont-ttf
      - libstdc++6
      - nodejs
      - npm
    build-environment:
      - CHROME_BIN: /usr/bin/chromium-browser
      - PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true
      - BUILD_VERSION: "1.8"
    stage-packages:
      - nodejs
      - npm
    override-build: |
      set -xe
      cd ${CRAFT_PART_SRC}/components/centraldashboard/

      # set environment variables
      export BUILD_COMMIT=$(git rev-parse HEAD)

      # Build phase
      # This rock only supports amd64 architecture at the moment, the application
      # will be built w/o flags for other architectures for simplicity.
      # Please refer to the upstream Dockerfile if that condition changes and different
      # architectures need to be supported.
      npm rebuild && \
      npm install && \
      npm test && \
      npm run build && \
      npm prune --production

      # install build artifacts
      mkdir -p ${CRAFT_PART_INSTALL}/app
      cp -r ${CRAFT_PART_SRC}/components/centraldashboard/* ${CRAFT_PART_INSTALL}/app

      # Change permissions of the /app directory to
      # be owned by the _daemon_ user
      chown 584792:584792 ${CRAFT_PART_INSTALL}/app
      chmod 755 ${CRAFT_PART_INSTALL}/app
